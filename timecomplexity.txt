

  1. basic for loop
   
    ex.1 
  	for(int i=1;i<=n;i++)  // i= 1,2,3,.....n
	{ 
 		sum+=2; //O(1)
	}
        // O(n+1) = O(n)
  rules for calculating time complexity
   i. constants are ignored.
         O((3n+1)/2)
	 => O(n)
   ii. lower order terms are ignored 
         O(n^2 + n)
	=> O(n^2)
  
    EX2. 
  	 for(int i=1;i<=n;i+=2)  
	{ 
 		sum+=2;//O(1)
	}
 	soln.
 		i = 1,3,5,7,.....n
        let this run k times
	an=a+(k-1)d;
 	n= 1 + (k-1)*2;
	n= 1+ 2k-2;
	n=2k -1;
        n+1 = 2k;
        k = n+1/2;
 	
 	O(n+1/2 + 1)=O(n)
     shorthand 
 	i=i+2; 
 	i+=2;
    EX 3. 
       for(int i=1;i<=n;i*=2)  
	{ 
 		sum+=2;//O(1)
	}
 	
	soln.
 	i= 1,2,4,8,16......n
 	a=1, r=2/1 = 2;
	an= a*r^k-1;
        n= 2^k-1; [a^(b-c)=a^b/a^c]
 	n= 2^k/2^1;
 	2n= 2^k;  
	k=log(2n);[logab=loga+logb]
	K=log2 + logn;
	k= 1 + logn;
 
 	O(1+logn)=> O(logn)
    Ex 4.
	 for(int i=n;i<=1;i=i/2)  
	{ 
 		sum+=2;//O(1)
	}

   soln. 
         i = n,n/2,n/4,n/8.....1
	a=n, r = (1/2)/1 =1/2;
        an = a*r^k-1;
        1= n*(1/2)^k-1;
	1= n* (1/(2)^k-1);
 	2^(k-1) = n;
        2^k = 2n;
	k= log(2n);
	k=log2 + logn;
	k = 1 + logn;
	
	O(1+logn)= O(logn)
   
    Ex.5
        for(int i=1;i<=n;i++)   // O(n)
	{    
             for(int j=1;j<=m;j++) //O(n)
             {
 		sum+=2;  //O(1)
             }
	}
       
        // O(n*n)= O(n^2)
  types of complexities:-
      i. constant => O(1)
     ii. linear complexity => O(n)
    iii. Logarithmic complexity => O(logn)
     iv. polynomial complexity => O(n^k)    (ex. n^2)
      v. exponential complexity => O(k^n)   (ex. 2^n)
   
  comparision of complexities:-
     
     Best ->  worst     
     O(1) < O(logn) < O(n) < O(n^k) < O(k^n) < O(n^n) 
    